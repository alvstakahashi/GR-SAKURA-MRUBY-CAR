#include <stdint.h>
#include "mruby.h"
#include "mruby/proc.h"
#include "mruby/data.h"
#include "mruby/compile.h"
#include "mruby/string.h"
#include "mruby/numeric.h"
#include "mruby/dump.h"
#include <math.h>
#include <stdlib.h>
#include <stdint.h>

#include <kernel.h>

mrb_state *mrb_global;
mrb_irep *idx_code1 = 0;

mrb_value
mrb_ssp_delay_delayDEBUG(mrb_state *mrb, mrb_value self)
{
	ER retval;
	mrb_int	tout;
    mrb_value argv;
    
    SYSTIM  startTime;
    SYSTIM  targetTime;
    SYSTIM	currentTime;

  	mrb_get_args(mrb, "o", &argv);
  	tout = mrb_fixnum(argv);
#if 1
	printf("mrb_ssp_delay tout = %d\n",tout);
#endif
//	int ai = mrb_gc_arena_save(mrb);
	get_tim(&startTime);
	targetTime = startTime + tout*100;
	if (targetTime < startTime)		// オーバーフロー
	{
		while(1)
		{
			get_tim(&currentTime);
			if (startTime > currentTime)	//オーバーフロー
			{
				break;
			}
		}
	}
	while(1)
	{
		get_tim(&currentTime);
		if (currentTime >= targetTime)
		{
			break;
		}
	}
//	retval = dly_tsk(tout);
//  	mrb_gc_arena_restore(mrb, ai);
	return argv;
}


void mruby_call(const uint8_t *mrb_p )
{
    mrb_global = mrb_open();
	if (mrb_global == NULL) 
	{
		return ;
	}
	mrb_value return_value1;
	if (idx_code1 == 0) 
	{
		idx_code1 = mrb_read_irep(mrb_global, mrb_p);
		if (idx_code1 == 0) 
		{
			// irep_error(mrb, idx_code1);
			return ;
		}
	}
	if (idx_code1 != 0) 
	{
//		int ai = mrb_gc_arena_save(mrb_global);
		return_value1 =  mrb_run(mrb_global, mrb_proc_new(mrb_global, idx_code1),mrb_top_self(mrb_global));
//		mrb_gc_arena_restore(mrb_global, ai);
	}
}
